[{"title":"❌This is a Index File","url":"/en/2022/09/28/note/README/","content":"Array has fixed size and contiguous memory. New elements cannot be appended. You can use memory address to access elements of Array. \nHeading 2Array has fixed size and contiguous memory. New elements cannot be appended. You can use memory address to access elements of Array. \nHeading 3Array has fixed size and contiguous memory. New elements cannot be appended. You can use memory address to access elements of Array. \nHeading 4Array has fixed size and contiguous memory. New elements cannot be appended. You can use memory address to access elements of Array. \nHeading 5Array has fixed size and contiguous memory. New elemenots cannot be appended. You can use memory address to access elements of Array. \nHeading 6Array has fixed size and contiguous memory. New elements cannot be appended. You can use memory address to access elements of Array.这是粗体这是斜体这是粗斜体dasdadThe .md only be used to open Note files in Typora.\n\nAnd it is a sample now!\n\n#include &lt;iostream&gt;da\n\n\n\n\nCommand\nFull name\nDo somthing\n\n\n\ngdb output\n\n\n\n\nr\nrun\nRun current program\n\n\nb\nbreak\nSet a breakpoint at [function] or [line] (in file)\n\n\nThe following is the config of style setting:\n\n\n\n\n&#123;  &quot;minimal-style@@sidebar-lines-off&quot;: true,  &quot;minimal-style@@sidebar-tabs-style&quot;: &quot;sidebar-tabs-square&quot;,  &quot;minimal-style@@tabs-style&quot;: &quot;tabs-square&quot;,  &quot;minimal-cards-style@@cards-border-width&quot;: &quot;3px&quot;,  &quot;minimal-mobile@@mobile-toolbar-off&quot;: true,  &quot;minimal-style@@tx1@@dark&quot;: &quot;#C0C8CE&quot;,  &quot;minimal-style@@h1-color@@dark&quot;: &quot;#FFFFFF&quot;,  &quot;minimal-style@@h1-color@@light&quot;: &quot;#000000&quot;,  &quot;minimal-style@@h1-size&quot;: &quot;2.5em&quot;,  &quot;minimal-style@@h2-size&quot;: &quot;2.2em&quot;,  &quot;minimal-style@@h3-size&quot;: &quot;1.7em&quot;,  &quot;minimal-style@@h2-color@@dark&quot;: &quot;#EEEEEE&quot;,  &quot;minimal-style@@h2-color@@light&quot;: &quot;#000000&quot;,  &quot;minimal-style@@h3-color@@light&quot;: &quot;#000000&quot;,  &quot;minimal-style@@h4-color@@dark&quot;: &quot;#E9E9E9&quot;,  &quot;minimal-style@@h4-color@@light&quot;: &quot;#202020&quot;,  &quot;minimal-style@@tx1@@light&quot;: &quot;#474747&quot;,  &quot;minimal-style@@minimal-code-scroll&quot;: true,  &quot;minimal-style@@h4-size&quot;: &quot;1.6em&quot;,  &quot;minimal-style@@h5-size&quot;: &quot;1.3em&quot;,  &quot;minimal-style@@h6-size&quot;: &quot;1em&quot;,  &quot;minimal-style@@table-lines&quot;: true,  &quot;minimal-style@@maximize-tables-off&quot;: &quot;maximize-tables&quot;,  &quot;minimal-style@@row-hover&quot;: false,  &quot;minimal-style@@h2-weight&quot;: 600,  &quot;minimal-style@@h1-weight&quot;: 700,  &quot;minimal-style@@h3-weight&quot;: 500,  &quot;minimal-style@@h5-weight&quot;: 400,  &quot;minimal-style@@h6-weight&quot;: 300,  &quot;minimal-style@@h4-weight&quot;: 500,  &quot;minimal-style@@h3-color@@dark&quot;: &quot;#E2E2E2&quot;,  &quot;minimal-style@@bold-color@@dark&quot;: &quot;#FFFFFF&quot;,  &quot;minimal-style@@italic-color@@dark&quot;: &quot;#FFFFFF&quot;,  &quot;minimal-style@@bold-weight&quot;: 600,  &quot;minimal-style@@code-background@@dark&quot;: &quot;#1F2326&quot;,  &quot;minimal-style@@bg1@@dark&quot;: &quot;#24292D&quot;,  &quot;minimal-style@@code-size&quot;: &quot;14px&quot;,  &quot;minimal-style@@blockquote-background-color@@dark&quot;: &quot;#2A2F33&quot;,  &quot;minimal-style@@blockquote-border-thickness&quot;: 4,  &quot;minimal-style@@blockquote-color@@dark&quot;: &quot;#747A86&quot;&#125;\n\n还有代码高需要搞。\nobsidian中style插件css备份11-23 20:36&#123;  &quot;minimal-style@@sidebar-lines-off&quot;: true,  &quot;minimal-style@@sidebar-tabs-style&quot;: &quot;sidebar-tabs-square&quot;,  &quot;minimal-style@@tabs-style&quot;: &quot;tabs-square&quot;,  &quot;minimal-cards-style@@cards-border-width&quot;: &quot;3px&quot;,  &quot;minimal-style@@tx1@@dark&quot;: &quot;#C0C8CE&quot;,  &quot;minimal-style@@h1-color@@dark&quot;: &quot;#FFFFFF&quot;,  &quot;minimal-style@@h1-color@@light&quot;: &quot;#000000&quot;,  &quot;minimal-style@@h1-size&quot;: &quot;2.5em&quot;,  &quot;minimal-style@@h2-size&quot;: &quot;2.2em&quot;,  &quot;minimal-style@@h3-size&quot;: &quot;1.7em&quot;,  &quot;minimal-style@@h2-color@@dark&quot;: &quot;#EEEEEE&quot;,  &quot;minimal-style@@h2-color@@light&quot;: &quot;#000000&quot;,  &quot;minimal-style@@h3-color@@light&quot;: &quot;#000000&quot;,  &quot;minimal-style@@h4-color@@dark&quot;: &quot;#E9E9E9&quot;,  &quot;minimal-style@@h4-color@@light&quot;: &quot;#202020&quot;,  &quot;minimal-style@@tx1@@light&quot;: &quot;#474747&quot;,  &quot;minimal-style@@minimal-code-scroll&quot;: false,  &quot;minimal-style@@h4-size&quot;: &quot;1.6em&quot;,  &quot;minimal-style@@h5-size&quot;: &quot;1.3em&quot;,  &quot;minimal-style@@h6-size&quot;: &quot;1em&quot;,  &quot;minimal-style@@table-lines&quot;: true,  &quot;minimal-style@@maximize-tables-off&quot;: &quot;maximize-tables&quot;,  &quot;minimal-style@@row-hover&quot;: false,  &quot;minimal-style@@h2-weight&quot;: 600,  &quot;minimal-style@@h1-weight&quot;: 700,  &quot;minimal-style@@h3-weight&quot;: 500,  &quot;minimal-style@@h5-weight&quot;: 400,  &quot;minimal-style@@h6-weight&quot;: 300,  &quot;minimal-style@@h4-weight&quot;: 500,  &quot;minimal-style@@h3-color@@dark&quot;: &quot;#E2E2E2&quot;,  &quot;minimal-style@@bold-color@@dark&quot;: &quot;#FFFFFF&quot;,  &quot;minimal-style@@italic-color@@dark&quot;: &quot;#FFFFFF&quot;,  &quot;minimal-style@@bold-weight&quot;: 600,  &quot;minimal-style@@code-background@@dark&quot;: &quot;#1F2326&quot;,  &quot;minimal-style@@bg1@@dark&quot;: &quot;#24292D&quot;,  &quot;minimal-style@@code-size&quot;: &quot;14px&quot;,  &quot;minimal-style@@blockquote-background-color@@dark&quot;: &quot;#2A2F33&quot;,  &quot;minimal-style@@blockquote-border-thickness&quot;: 4,  &quot;minimal-style@@blockquote-color@@dark&quot;: &quot;#747A86&quot;,  &quot;minimal-style@@code-comment@@dark&quot;: &quot;#5C6370&quot;,  &quot;minimal-style@@code-function@@dark&quot;: &quot;#61AFEF&quot;,  &quot;minimal-style@@code-keyword@@dark&quot;: &quot;#E45649&quot;,  &quot;minimal-style@@code-operator@@dark&quot;: &quot;#528BFF&quot;,  &quot;minimal-style@@code-string@@dark&quot;: &quot;#98C379&quot;,  &quot;minimal-style@@code-normal@@dark&quot;: &quot;#FFFFFF&quot;,  &quot;minimal-style@@image-muted&quot;: 1,  &quot;minimal-style@@zoom-off&quot;: true,  &quot;minimal-advanced@@cursor&quot;: &quot;default&quot;,  &quot;minimal-advanced@@styled-scrollbars&quot;: false,  &quot;minimal-style@@icon-muted&quot;: 0.5,  &quot;minimal-style@@window-title-off&quot;: false,  &quot;minimal-style@@bg1@@light&quot;: &quot;#F2F2F2&quot;,  &quot;minimal-style@@color-orange@@dark&quot;: &quot;#FBFF8A&quot;&#125;\n\n编辑obsidian.css文件：\n/* 文件浏览器和大纲窗格显示关系连线 */.outline .tree-item-children &#123;  margin-left: 20px;  border-left: 1px solid var(--background-modifier-border);  border-radius: 6px;  transition: all 0.5s ease-in-out;&#125;.nav-folder-children .nav-folder-children &#123;  margin-left: 20px;  padding-left: 0;  border-left: 1px solid var(--background-modifier-border);  border-radius: 6px;  transition: all 0.5s ease-in-out;&#125;/* 右下状态栏淡出 *//* auto fades status bar items */.status-bar:not(:hover) .status-bar-item &#123;  opacity: 0.25;  transition: opacity .25s ease-in-out;&#125;/* 滚动条 */body:not(.native-scrollbars) ::-webkit-scrollbar &#123;  background-color: rgba(255, 255, 255, 0);&#125;/* 滚动条滚动的那部分 */body:not(.native-scrollbars) ::-webkit-scrollbar-thumb &#123;  background-color: rgb(245, 245, 245);  border: 1px solid rgb(226, 226, 226);  border-radius: 0%;&#125;/* 行内代码块 */.cm-s-obsidian span.cm-inline-code &#123;  border: 1px solid rgb(226, 226, 226);  border-radius: 3px;  color: #000000;&#125;/* 引用块 */blockquote &#123;  border-left: 4px solid #dfe2e5;  padding: 0 15px;  color: #777777;&#125;blockquote blockquote &#123;  padding-right: 0;&#125;.markdown-source-view.mod-cm6.is-live-preview .HyperMD-quote:before &#123;  /* border-top: 12px; */  margin-top: 6px;  margin-bottom: 8px;&#125;/* 代码块 */.cm-s-obsidian .HyperMD-codeblock &#123;  /* border-top: 1px solid rgb(226, 226, 226); */  border-left: 1px solid rgb(232, 235, 238);  border-right: 1px solid rgb(232, 235, 238);  background-color: #f8f8f8;&#125;.markdown-source-view.mod-cm6 .cm-line.HyperMD-codeblock &#123;  padding-top: 0px;  padding-bottom: 0px;&#125;/* 代码块顶端 */.cm-s-obsidian div.HyperMD-codeblock-begin-bg &#123;  background-color: #f8f8f8;  border-left: 1px solid rgb(232, 235, 238);  border-right: 1px solid rgb(232, 235, 238);  border-top: 1px solid rgb(232, 235, 238);  border-top-left-radius: 3px;  border-top-right-radius: 3px;  font-size: 2px;&#125;/* 代码块底端 */.cm-s-obsidian div.HyperMD-codeblock-end-bg &#123;  background-color: #f8f8f8;  border-left: 1px solid rgb(232, 235, 238);  border-right: 1px solid rgb(232, 235, 238);  border-bottom: 1px solid rgb(232, 235, 238);  border-bottom-left-radius: 3px;  border-bottom-right-radius: 3px;  font-size: 2px;&#125;/* 表格 */table &#123;  padding: 0px;  word-break: initial;&#125;table tr &#123;  border: 1px solid #dfe2e5;  margin: 0;  padding: 0;&#125;table tr:nth-child(2n),thead &#123;  background-color: #f8f8f8;&#125;table th &#123;  font-weight: bold;  border: 1px solid #dfe2e5;  border-bottom: 0;  margin: 0;  padding: 6px 13px;&#125;table td &#123;  border: 1px solid #dfe2e5;  margin: 0;  padding: 6px 13px;&#125;table th:first-child,table td:first-child &#123;  margin-top: 0;&#125;table th:last-child,table td:last-child &#123;  margin-bottom: 0;&#125;/* 表格与正文的间距 */.markdown-source-view.mod-cm6 .cm-table-widget &#123;  padding-top: 10px;  padding-bottom: 10px;&#125;/* 表格内文字 */.markdown-rendered td &#123;  padding-left: 2px;&#125;/* 编辑器正文 */.mod-cm6 .cm-editor .cm-line &#123;  padding-top: 6px;  padding-bottom: 8px;&#125;/* 标题 */.mod-cm6 .cm-editor .HyperMD-header-1 &#123;  padding-top: 40px;  padding-bottom: 40px;&#125;.mod-cm6 .cm-editor .HyperMD-header-2 &#123;  padding-top: 20px;  padding-bottom: 20px;&#125;.mod-cm6 .cm-editor .HyperMD-header-3 &#123;  padding-top: 15px;  padding-bottom: 15px;&#125;/* 代码高亮 */body.theme-light.css-settings-manager &#123;  --code-comment: #a50;  --code-function: #0000ff;  --code-keyword: #770088;  --code-operator: #981a1a;  --code-string: #aa1111;  --code-normal: #000000;  --code-number: #116644;  --code-variable: #000000;&#125;.cm-variable &#123;  color: #000000;&#125;.cm-type &#123;  color: #008855;&#125;"},{"title":"Ftp","url":"/en/2023/05/25/note/Wiki/FTP/","content":"\nFile Transfer Protocol client\n\n\n\n\n\n\nOption\nImplication\n\n\n\n-4\ncontact IPv4 hosts\n\n\n-6\ncontact IPv6 hosts\n\n\n-A\nenable active mode transfer\n\n\n-d\nenbale debugging outpout\n\n\n-e\ndisble command line editing\n\n\n-g\nturn off file name globbing\n\n\n-i\ndo not prompt during multiple file\n\n\n-n\ndo not automatically login to the remote system\n\n\n","categories":["Wiki"],"tags":["Protocol","Linux"]},{"title":"GDB","url":"/en/2023/05/25/note/Wiki/GDB/","content":"Compile the source file to the binary file.Add argument -g to generate a GDB binary file.\n\n\ngcc -g source.c -o outputg++ -g source.cpp -o outputls -atotal 52K-rw-r--r-- 1 dionysen dionysen  450 Oct  5 22:26 binary-search.cpp-rw-r--r-- 1 dionysen dionysen 2.5K Oct  2 14:29 linked-list.cpp-rw-r--r-- 1 dionysen dionysen  411 Oct  2 14:41 node.cpp-rwxr-xr-x 1 dionysen dionysen  37K Oct  5 23:04 output\n\n\n\n\nCommand\nFull name\nDo somthing\n\n\n\ngdb output\n\n\n\n\nr\nrun\nRun current program\n\n\nb\nbreak\nSet a breakpoint at [function] or [line] (in file)\n\n\nc\ncontinue\nContinue running your program (after stopping, e.g. at a breakpoint).\n\n\nn\nnext\nExecute next program line (after stopping); step over any function calls in the line.\n\n\ns\nstep\nExecute next program line (after stopping); step into any function calls in the line.\n\n\nl\nlist\nType the text of the program in the vicinity of where it is presently stopped.\n\n\np\nprint\nDisplay the value of an expression.\n\n\nwatch\nwatch\nSet a watchpoint in an address of expression\n\n\ni b\ninfo break\nCheck information of breakpoints.\n\n\nk\nkill\nKill the program being debugged.\n\n\nq\nquit\nExit from GDB.\n\n\n\nYou can use shell [args] to execute a shell command.\n\n","categories":["Wiki"],"tags":["Linux","CPP","C","Debug"]},{"title":"Obsidian Minimal Theme Setting","url":"/en/2023/05/25/note/Wiki/Obsidian/","content":".css setting in obsidian minimal theme.\n\n\n&#123;  &quot;minimal-cards-style@@cards-border-width&quot;: &quot;3px&quot;,  &quot;minimal-advanced@@cursor&quot;: &quot;default&quot;,  &quot;minimal-advanced@@styled-scrollbars&quot;: false,  &quot;minimal-style@@blockquote-border-thickness&quot;: 4,  &quot;minimal-style@@code-background@@light&quot;: &quot;#F8F8F8&quot;,  &quot;minimal-style@@sidebar-lines-off&quot;: true,  &quot;minimal-style@@sidebar-tabs-style&quot;: &quot;sidebar-tabs-square&quot;,  &quot;minimal-style@@tabs-style&quot;: &quot;tabs-default&quot;,  &quot;minimal-mobile@@mobile-toolbar-off&quot;: true,  &quot;minimal-style@@tx1@@dark&quot;: &quot;#C0C8CE&quot;,  &quot;minimal-style@@h1-color@@dark&quot;: &quot;#FFFFFF&quot;,  &quot;minimal-style@@h1-color@@light&quot;: &quot;#000000&quot;,  &quot;minimal-style@@h1-size&quot;: &quot;2.5em&quot;,  &quot;minimal-style@@h2-size&quot;: &quot;2.2em&quot;,  &quot;minimal-style@@h3-size&quot;: &quot;1.7em&quot;,  &quot;minimal-style@@h2-color@@dark&quot;: &quot;#EEEEEE&quot;,  &quot;minimal-style@@h2-color@@light&quot;: &quot;#000000&quot;,  &quot;minimal-style@@h3-color@@light&quot;: &quot;#000000&quot;,  &quot;minimal-style@@h4-color@@dark&quot;: &quot;#E9E9E9&quot;,  &quot;minimal-style@@h4-color@@light&quot;: &quot;#202020&quot;,  &quot;minimal-style@@tx1@@light&quot;: &quot;#000000&quot;,  &quot;minimal-style@@minimal-code-scroll&quot;: false,  &quot;minimal-style@@h4-size&quot;: &quot;1.6em&quot;,  &quot;minimal-style@@h5-size&quot;: &quot;1.3em&quot;,  &quot;minimal-style@@h6-size&quot;: &quot;1em&quot;,  &quot;minimal-style@@table-lines&quot;: true,  &quot;minimal-style@@maximize-tables-off&quot;: &quot;maximize-tables&quot;,  &quot;minimal-style@@row-hover&quot;: false,  &quot;minimal-style@@h2-weight&quot;: 700,  &quot;minimal-style@@h1-weight&quot;: 800,  &quot;minimal-style@@h3-weight&quot;: 600,  &quot;minimal-style@@h5-weight&quot;: 400,  &quot;minimal-style@@h6-weight&quot;: 300,  &quot;minimal-style@@h4-weight&quot;: 500,  &quot;minimal-style@@h3-color@@dark&quot;: &quot;#E2E2E2&quot;,  &quot;minimal-style@@bold-color@@dark&quot;: &quot;#FFFFFF&quot;,  &quot;minimal-style@@italic-color@@dark&quot;: &quot;#FFFFFF&quot;,  &quot;minimal-style@@bold-weight&quot;: 700,  &quot;minimal-style@@code-background@@dark&quot;: &quot;#1F2326&quot;,  &quot;minimal-style@@bg1@@dark&quot;: &quot;#24292D&quot;,  &quot;minimal-style@@blockquote-background-color@@dark&quot;: &quot;#2A2F33&quot;,  &quot;minimal-style@@blockquote-color@@dark&quot;: &quot;#747A86&quot;,  &quot;minimal-style@@code-value@@light&quot;: &quot;#0000FF&quot;,  &quot;minimal-style@@header-height&quot;: &quot;40px&quot;,  &quot;minimal-style@@h6-variant&quot;: &quot;normal&quot;,  &quot;minimal-style@@h5-variant&quot;: &quot;normal&quot;,  &quot;minimal-style@@h4-variant&quot;: &quot;normal&quot;,  &quot;minimal-style@@file-header-font-size&quot;: &quot;0.6em&quot;&#125;\n","categories":["Wiki"],"tags":["Obsidian"]},{"title":"SCP protocol","url":"/en/2023/05/25/note/Wiki/SCP/","content":"scp copies files between hosts on a network.\n\n\nscpIt uses ssh for data transfer, and uses the same authentication and provides the same security as a login session.\nscp will ask for passwords or passphrases if they are needed for authentication.\nThe source and target may be specified as a local pathname, a remote host with optional path in the form [user@]host:[path], or a URI in the form scp://[user@]host[:port][/path].\n\nLocal file names can be made explicit using absolute or relative pathnames to avoid scp treating file names containing ‘:‘ as host speacifiers.\n\nWhen copying between two remote hosts, if the URI format is used, a port cannot be specified on the target if the -R option is used.\n\n\n\nOptions\nImplication\n\n\n\n-3\nCopies between two remote hosts are transferred through the local host.  Without this option the data is copied directly between the two remote hosts.\n\n\n-4\nForces scp to use IPv4 addresses only\n\n\n-6\nForces scp to use IPv6 addresses only\n\n\n-A\nAllows forwarding of ssh-agent(1) to the remote system.  The default is not to forward an authentication agent.\n\n\n-C\nCompression enable\n\n\n-l\nLimits the used bandwidth, specified in Kbit&#x2F;s\n\n\n","categories":["Wiki"],"tags":["SCP","SSH"]},{"title":"Source Lists","url":"/en/2023/05/25/note/Wiki/Source%20List/","content":"Some commonly used source lists.\n\n\nSource ListsUSTC Source Listtermux编辑/data/data/com.termux/files/usr/etc/apt/sources.list\ndeb https://mirrors.ustc.edu.cn/termux/apt/termux-main stable main\n\ndebiandeb http://mirrors.ustc.edu.cn/debian stable main contrib non-free# deb-src http://mirrors.ustc.edu.cn/debian stable main contrib non-freedeb http://mirrors.ustc.edu.cn/debian stable-updates main contrib non-free# deb-src http://mirrors.ustc.edu.cn/debian stable-updates main contrib non-free# deb http://mirrors.ustc.edu.cn/debian stable-proposed-updates main contrib non-free# deb-src http://mirrors.ustc.edu.cn/debian stable-proposed-updates main contrib non-free\n\narchlinuxServer = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch# armServer = https://mirrors.ustc.edu.cn/archlinuxarm/$arch/$repo\n\nubuntu# 默认注释了源码仓库，如有需要可自行取消注释deb https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse# deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse# deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse# deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse# deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse# 预发布软件源，不建议启用# deb https://mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse# deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse\n\nkalisupported：amd64, armel, armhf, i386\ndeb https://mirrors.ustc.edu.cn/kali kali-rolling main non-free contribdeb-src https://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib\n","categories":["Wiki"],"tags":["Linux","Source"]},{"title":"WSL2","url":"/en/2023/05/25/note/Wiki/WSL2/","content":"\n✅  This is a tutorial of installing  on WSL2\n\n\n\nInstall WSL2Start using WSLOpen powershell using administration rights, and input:\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n\nRequirement of WSL2For x64 system, the version of win10 must be 1903 or higher.Using “win + R” and input winver to check.\nStart Virtual machinel platformOpen powershell using administration rights, and input:\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n\nInstall Linux Kernal Updating Download Link: https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msiInstall.\nSetting the default version 2Open powershell using administration rights, and input:\nwsl --set-default-version 2\n\nThen, WSL2 is already installed.\nUpdate to WSLg将win10更新到最新的版本\nOpen powershell using administration rights, and input:\nwsl --updatewsl --version# display:WSL version: 1.0.3.0Kernel version: 5.15.79.1WSLg version: 1.0.47MSRDC version: 1.2.3575Direct3D version: 1.606.4DXCore version: 10.0.25131.1002-220531-1700.rs-onecore-base2-hypWindows version: 10.0.19045.2364\n\n否则说明win10还不是最新的，继续更新\nInstall Archlinux on WSL2Download ArchlinuxDownload link: https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/latest/Find and Download  archlinux-bootstrap-2020.10.01-x86_64.tar.gz .\nInstall Archlinux by LxRunOffline1. Input the command in powershellLxRunOffline i -n &lt;自定义名称&gt; -f &lt;Arch镜像位置&gt; -d &lt;安装系统的位置&gt; -r root.x86_64\n\nexample:\nLxRunOffline i -n ArchLinux -f C:\\Users\\dionysen\\Downloads\\archlinux-bootstrap-2020.10.01-x86_64.tar.gz -d C:\\Users\\dionysen\\Linux -r root.x86_64\n\n2. Change WSL2 version in Archlinuxwsl --set-version ArchLinux 2\n\nConfigurationBasic Configurationwsl -d Archlinuxrm /etc/resolv.confexit\n\nThe terminal window will be unavailable, so you should reopen a new terminal window, then:\nwsl --shutdown Archlinuxwsl -d Archlinuxcd /etcvi pacman.conf\n\nAdd following code in the end of pacman.conf:\n[archlinuxcn]Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch\n\nAnd change the mirrorlist:\nvi ./pacman.d/mirrorlist\n\nRemove the comment of a Chinese source.\npacman -Syypacman-key --initpacman-key --populatepacman -S archlinuxcn-keyringpacman -S base base-devel vim git wgetpasswd # input the password of rootuseradd -m -G wheel -s /bin/bash &lt;username&gt;passwd &lt;username&gt;vim /etc/sudoers\n\nUse /wheel find the line wheel ALL=(ALL) ALL and remove the comment.\nid -u &lt;username&gt;exit\n\nExecute the command in powershell to set default user of Archlinux:\nlxrunoffline su -n Archlinux -v &lt;username&gt;\n\nInstall Ubuntu20.02 in WSL2wsl --list --online\t\t# 查看可直接安装的发行版列表# 显示如下：PS C:\\Windows\\system32&gt; wsl -l --onlineThe following is a list of valid distributions that can be installed.Install using &#x27;wsl.exe --install &lt;Distro&gt;&#x27;.NAME               FRIENDLY NAMEUbuntu             UbuntuDebian             Debian GNU/Linuxkali-linux         Kali Linux RollingSLES-12            SUSE Linux Enterprise Server v12SLES-15            SUSE Linux Enterprise Server v15Ubuntu-18.04       Ubuntu 18.04 LTSUbuntu-20.04       Ubuntu 20.04 LTSOracleLinux_8_5    Oracle Linux 8.5OracleLinux_7_9    Oracle Linux 7.9# 安装ubuntu 20.04wsl --install Ubuntu-20.04\n\n然后打开终端，打开ubuntu-20.04，创建用户和密码\n换源+更新\n然后安装anaconda\nInstall Anaconda on Ubuntuwget https://mirrors.bfsu.edu.cn/anaconda/archive/Anaconda3-5.3.0-Linux-x86_64.shchmod +x Anaconda3-5.3.0-Linux-x86_64.sh./Anaconda3-5.3.0-Linux-x86_64.shyesENTER\n\n安装完成之后，检查版本：\nanaconda -Vconda -V\n\n使用anaconda换源：\ncdvim .condarc\n\n编辑.condarc ，添加清华源\n# add to .condarcssl_verify: falsechannels:  - defaultsshow_channel_urls: truedefault_channels:  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2custom_channels:  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud\n\n更新：\n conda update -n base -c defaults conda # 升级anaconda\n\nconda create -n myconda python=3.7 \t\t# 创建虚拟环境，名称为myconda（可以修改conda info --envs \t\t\t\t\t\t# 查看已安装的虚拟环境conda activate myconda\t\t\t\t\t# 激活环境mycondaconda deactivate\t\t\t\t\t\t# 关闭当前环境\n\nconda list\t\t\t\t# 查看conda的包pip list\t\t\t\t# 查看pip的包# 给pip换源  （也可以直接使用命令更换阿里源：# pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/cdmkdir .pipvim .pip/pip.conf# 添加以下内容#-----------------------------------------[global]index-url = https://mirrors.bfsu.edu.cn/pypi/web/simpleformat = columnstrusted-host = mirrors.bfsu.edu.cn#-----------------------------------------pip install jupyter \t# 安装jupyterjupyter notebook\t\t# 开启jupyter notebook服务\n\n附加配置systemd编辑 /etc/wsl.conf\n[boot]systemd=true\n\nWSL distros 的备份还原\n备份\n\nwsl -l -v# 显示为  NAME            STATE           VERSION* Ubuntu-20.04    Running         2wsl -t Ubuntu-20.04wsl --export Ubuntu-20.04 E:\\SystemBackup\\ubuntu-wsl2-2022.11.29.tar\n\n\n还原\n\nwsl --import &lt;distro-name&gt; &lt;install-path&gt; &lt;backup-file&gt;# e.g.wsl --import Ubuntu c:\\wsl2 d:\\save\\linux\\wsl2.tar\n\nWSL-Ubuntu安装 [[Computer&#x2F;Programming&#x2F;Language&#x2F;Qt|qt]]sudo apt install qt5* qtcreator\n\n创建项目时如果出现“no suitable kits”，点击“option”查看配置，如果“QT version”为“none”，则选择 /usr/lib/qt5/bin/qmake，保存即可。\n","categories":["Wiki"],"tags":["xpra","x11-forward"]},{"title":"Clangd Config CMakeLists. txt","url":"/en/2023/05/25/note/Wiki/cpp_config/","content":"Vim using Coc-nvim plugin clangd-lsp need to read CMakeLists.txt so that it can auto-complete your code.If your project builds with CMake, it can generate this file. You should enable it with:\ncmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1\n\ncompile_commands.json will be written to your build directory. If your build directory is $SRC or $SRC/build, clangd will find it. Otherwise, symlink or copy it to $SRC, the root of your source tree.\nln -s ~/myproject-build/compile_commands.json ~/myproject/\n\nGenerated compile_commands.json can support auto completion for third party libraries.\n","categories":["Wiki"],"tags":["Linux","CPP","CMake","Clangd"]},{"title":"V2rayA","url":"/en/2023/05/25/note/Wiki/v2raya/","content":"On archlinux:\nyay -S xray-binsudo pacman -S v2rayyay -S v2raya-bin\n\nMaybe you need restart your computer!\n\n\nAnd config:\n\n\n\n项目\n配置\n\n\n\n透明代理&#x2F;系统代理\n启用：大陆白名单模式\n\n\n透明代理&#x2F;系统代理实现方式\nredirect\n\n\n规则端口的分流模式\n大陆白名单模式\n\n\n防止 DNS 污染\n仅防止 DNS 劫持\n\n\n特殊模式\nsupervisor\n\n\nTCPFastOpen\n保持系统默认\n\n\n","categories":["Wiki"],"tags":["VPN"]},{"title":"Data Structure","url":"/en/2023/05/25/note/Computer/Programming/Algorithm%20and%20Data%20structure/DataStrucuture_en/","content":"Data Strutcure\n\n\nArrayArray has fixed size and contiguous memory. New elements cannot be appended. You can use memory address to access elements of Array. \nchar a[5] = &#123;&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;,&#125;; \n\nC++ counts food tags from `0`, so `a[0] = 'h'` and `a[1] = 'e'`.\nRandom access using `a[i]` has `O(1)` time complexity.\nUnits of array can be modified. \na[0] = &#x27;b&#x27;;\nresult:\nbello\n\n### Dynamic Allocation of Arrays\n\nA size-n array can be created in this way:\nchar a[n];\n\nBut when writing the code, n must be known.\nIf n is unknown, how dose the program run?\nchar* a = NULL;int n; // array size cin &gt;&gt; n; // read in the size. e.g., get n = 5a = new char[n];\n\nNow a is an empty array whose size is 5.\n// store somrthing in the arraya[0] = &#x27;h&#x27;;a[1] = &#x27;e&#x27;;a[2] = &#x27;l&#x27;;a[3] = &#x27;l&#x27;;a[4] = &#x27;o&#x27;;\n\nWhen done, free memory. Otherwise, memory leak can happen.\ndelete [] a;a = NULL;\n\n\n\nRemoving an element in the middle has O(n) time complexity. Require moving the remaining items leftward.\nVectorVector is almost the same as array.\nThe main difference is that vector’s capacity can automatically grow.\nNew elements can be appended using push_back() in O(1) time(on average). \nThe last element can be removed using pop_back() in O(1) time.\nstd::vector&lt;char&gt; v = &#123;&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;&#125;; v.push_back();v.pop_back();v.erase(v.begin() + 1);\n\nVector can delete an element in the middle using erase() in O(n) time. So it is not better to do this.\nstd::vector&lt;char&gt; v(100);cout &lt;&lt; v.size();\t\t// print &quot;100&quot;cout &lt;&lt; v.capacity();\t// print &quot;100&quot;// thenv.push_back(&#x27;x&#x27;);cout &lt;&lt; v.size();\t\t// print &quot;101&quot;cout &lt;&lt; v.capacity();\t// print &quot;200&quot;\n\nWhen size is going to exceed capacity, program will create a new array of capacity 200, copy the 100 elements from the old array to the new, put  the new element in the 101st position and free the old array from memory.\nListA NodeA node contains a data and two pointers that one points to the previous node and another points to the next node.\nDoubly Linked Liststd::list&lt;char&gt; l = &#123;&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;&#125;; \n\ncout &lt;&lt; l[2];\t\t// does not workl[0] = &#x27;a&#x27;;\t\t\t// does not work\n\nlist&lt;char&gt;::iterator iter = l.begin();cout &lt;&lt; *iter;\t\t// print &#x27;h&#x27;iter++;cout &lt;&lt; *iter;\t\t// print &#x27;e&#x27;*iter = &#x27;a&#x27;;push_back();push.front();\n\nDiference\n\n\n\nArray\nVector\nList\n\n\n\nSize\nfixed\ncan increase and decrease\ncan increase and decrease\n\n\nMemory\ncontiguous\ncontiguous\nnot contiguous\n\n\n\n\n\n\nArray\nVector\nList\n\n\n\nRand Access\nO(1)\nO(1)\n—\n\n\npush_back()\n—\nO(1)(average)\nO(1)\n\n\npop_back()\n—\nO(1)\nO(1)\n\n\ninsert()\n—\nO(n)(average)\nO(1)\n\n\nerase()\n—\nO(n)(average)\nO(1)\n\n\nWhich shall we use?\nArray: Fixed size throughout.\nVector: \n\nRandom access(i.e., read or write the i-th element) is fast.\nInsertion and deletion at the end are fas.\ninsertion and deletion in the front and midddle are slow.\n\nList:\n\nSequentially visiting elements is fast; random access is not allowed.\nFrequent insertion and deletion at any position are OK.\n\nBinary Searchint arr[] = &#123;3, 5, 12, 16, 17, 26, 32, 51, 53, 64&#125;;\n\nInputs: (i) an array whose elements are in the accending order and (ii) a key.\nGoal: Search for the key in the array. If found, return its index; if not found, return -1.\nExamle 1:\n\nSearch for the elemnt 53.\nReturn 8.\n\nExample 2:\n\nSearch for the element 9.\nReturn -1.\n\nExample: key = 26.  Use two variables left and right pointing to the front of the array and the back respectively. \nint search(int arr[], int left, int right, int key)&#123;    while (left &lt;= right) &#123;        int mid = (left + right) / 2;        if (key == arr[mid])            return mid;        if (key &gt; arr[mid])            left = mid + 1;        else            right = mid - 1;    &#125;    return -1;&#125;\n\nHow to suport both search and insertion?\nstd::vector&lt;int&gt; v = &#123;3, 5, 12, 16, 17, 26, 32, 51, 53, 64&#125;;\n\nThe ascending order must be kept; otherwisem search would take O(n) time.Inserting an item into the middle has O(n) time complexity(on average).Can we perform binary search in the list?No, Given left and right, we cannot get mid efficiently.\n\n\n\n\nSearch\nInsertion\n\n\n\nVector\nO(log n)\nO(n)\n\n\nList\nO(n)\nO(1)\n\n\nSkip List\nO(log n)\nO(log n)\n\n\nSkip ListLinked list does not support binary search.\n\nSkip list allows fast search and fast inertion.\n\nSearch: O(log n) time complexcity on average.\nInsertion: O(log n) time complexcity on average.\nBuild a skip list（待补充）Initially, a linked list contains n numbers in ascending order.\nSearchInsertion","categories":["Programming","Data Structure"],"tags":["Data"]},{"title":"Singly Linked list","url":"/en/2023/05/25/note/Computer/Programming/Algorithm%20and%20Data%20structure/Linked_list_en/","content":"Now we implement a singly linked list with C++.\n\nLinked list is a Data structure that contains a variable and a pointer pointing to the next node.\n\n\n\nStorage of dataFirst of all, a data structure is needed to store the variable and the pointer. It can be coded:\nstruct Node &#123;       int val;       Node* next;       Node()           : val(0)           , next(nullptr)       &#123;       &#125;       Node(int x)           : val(x)           , next(nullptr)       &#123;       &#125;       Node(int x, Node* next)           : val(x)           , next(next)       &#123;       &#125;   &#125;;\n\nThree constructors are packaged in the struct Node, which can help us create a head of a linked list conveniently.\nNode *head = new Node();Node *head = new Node(0);Node *head = new Node(0, nullptr);\n\nThere are three ways to create a pointer head. Using first way, you can create a pointer head pointing to a node that has a variable val = 0 and a nullptr (a pointer pointing nothing). And the second way, you create a same head but you must assign a value to val of the node pointed to by head. The last, you even can link a node to the head requiring you give a pointer pointing to the next node.\nThen, how to handle the linked list?\nLinked list classObject-oriented is a\nclass ListNode &#123;public:    struct Node &#123;        int val;        Node* next;        Node()            : val(0)            , next(nullptr)        &#123;        &#125;        Node(int x)            : val(x)            , next(nullptr)        &#123;        &#125;        Node(int x, Node* next)            : val(x)            , next(next)        &#123;        &#125;    &#125;;    ListNode()    &#123;        this-&gt;head = nullptr;    &#125;    Node* head; void assign(int val);    int at(int pos);    void set(int pos, int val);    void del(int pos);    int find(int val);    void print();&#125;;\n\n    void assign(int val)    &#123;        Node* p = new Node(val);        Node* last = this-&gt;head;        if (last) &#123;            while (last-&gt;next) &#123;                last = last-&gt;next;            &#125;            last-&gt;next = p;        &#125; else &#123;            head = p;        &#125;    &#125;    int at(int pos)    &#123;        int index = 0;        Node* p = this-&gt;head;        while (index != pos) &#123;            p = p-&gt;next;            index++;        &#125;        return p-&gt;val;    &#125;    void set(int pos, int val)    &#123;        int index = 0;        Node* p = this-&gt;head;        while (index != pos) &#123;            p = p-&gt;next;            index++;        &#125;        p-&gt;val = val;    &#125;    void del(int pos)    &#123;        Node* p = this-&gt;head;        if (pos == 0) &#123;            head = head-&gt;next;            delete p;        &#125; else &#123;            int index = 0;            Node* p = this-&gt;head;            Node* q;            for (q = nullptr; p; q = p, p = p-&gt;next) &#123;                if (index == pos - 1) &#123;                    q-&gt;next = p-&gt;next;                    delete p;                    break;                &#125;                index++;            &#125;        &#125;    &#125;    int find(int val)    &#123;        Node* p;        int index = 0;        for (p = this-&gt;head; p; p = p-&gt;next) &#123;            if (p-&gt;val == val) &#123;                return index;            &#125;            index++;        &#125;        return -1;    &#125;    void print()    &#123;        Node* p;        cout &lt;&lt; &quot;[&quot;;        for (p = this-&gt;head; p; p = p-&gt;next) &#123;            cout &lt;&lt; p-&gt;val;            if (p-&gt;next) &#123;                cout &lt;&lt; &quot;, &quot;;            &#125;        &#125;        cout &lt;&lt; &quot;]&quot; &lt;&lt; endl;    &#125;&#125;;int main()&#123;    ListNode* node = new ListNode;    node-&gt;assign(1);    node-&gt;assign(2);    node-&gt;assign(3);    node-&gt;assign(4);    node-&gt;assign(5);    node-&gt;print();    cout &lt;&lt; node-&gt;find(2) &lt;&lt; endl;    node-&gt;del(2);    node-&gt;print();    cout &lt;&lt; node-&gt;at(2) &lt;&lt; endl;    node-&gt;set(2, 9);    node-&gt;print();    return 0;&#125;\n\nMerge Two LinkedListNode *mergeList(ListNode *l1, ListNode *l2) &#123;    Node *p, *q, *temp, *newList;    if (l1-&gt;head-&gt;val &gt;        l2-&gt;head-&gt;val) &#123; // make ptr &quot;p&quot; is the head of small list        newList = l2-&gt;head;        p = l2-&gt;head;        q = l1-&gt;head;    &#125; else &#123;        newList = l1-&gt;head;        p = l1-&gt;head;        q = l2-&gt;head;    &#125;    while (p != nullptr &amp;&amp; q != nullptr) &#123;        if (q-&gt;val &gt;= p-&gt;val) &#123;            temp = q-&gt;next;            q-&gt;next = p-&gt;next;            p-&gt;next = q;            q = temp;            p = p-&gt;next-&gt;next;        &#125; else &#123;            temp = p-&gt;next;            p-&gt;next = q-&gt;next;            q-&gt;next = p;            p = temp;            q = q-&gt;next-&gt;next;        &#125;    &#125;    if (q != nullptr) &#123;        p-&gt;next = q;    &#125;    return newList;&#125;\n\n\n\n","categories":["Wiki"],"tags":["Linux","Termux","WSL2","Windows"]},{"title":"C Language","url":"/en/2022/05/25/note/Computer/Programming/Language/C/","content":"\n📚  Notes and personal understanding of the process of learning C language, used to find.\n\n\n\n\n\nIntroduction\nOur daily life has become inseparable from computers. Whether you are using computers or not, you are using computers consciously or unconsciously, or using the services that computers provide for you. When we are in the use of computer, we are all in the use of computer has some software, so we will go to find the APP, if you searched all the APPs on the market, is there no have the functionality of the APP you want, then you have to write their own one, if you want to do something special, you can’t find the right software, will still have to write their own one.Learning programming is not about writing software for yourself. It is about learning programming to understand how computers work, what they can or are good at doing, what they can’t or aren’t good at doing, and how computers solve problems.\n\n —— Weng Kai\n\n\n\nGet startedFramework#include &quot;stdio.h&quot;int main()&#123;    return 0;&#125;\n\nAny programs programed by C language must have this framework.\nOutput functionYou can understand it as function in math, which is a mapping relationship. But they are different.\nprintf is a function, whoes function is output a string by formating printf(&quot;......\\n&quot;) .\nFor example, the Hello, world! :\n#include &quot;stdio.h&quot;int main()&#123;    printf(&quot;Hello,world!\\n&quot;); // \\n make it wrapping    return 0;&#125;\n\nprintf  can print not only a string, but also the value of the variable, but you need to format the variable.\nVariables and constants\nThe computer carries on the computation, then participates in the computation is the number, participates in the computation in the C language the number is called the quantity, the quantity divides into the variable and the constant.Use decimal for expression of daily life, because is advantageous for the calculation of the human brain, a computer internal use binary, for convenience of computer calculation, and the computer expression, as a result of bytes in computer internal frequency is higher, if you can use a simple way to express its inner meaning accurately, Will bring us a lot of convenience, so often use hexadecimal expression.But the number itself remains the same no matter which way it is counted.\n\nConstantsAs the name implies, an invariant quantity that, once initialized, cannot be changed.\nVariablesAs the name implies, a variable quantity that, once defined, can be assigned any value to change its size.\nThe way of difination：\nint i;int j = 1;char k;float h = 1.2;double g = 2.0;\n\nFor example, i is the variable itself, int is an integer variable, whose value can only be an integer, while double is a double-precision floating point number, which can represent a decimal.\nDifferent variable types have different value types and value ranges.\nCharacter variables:\nUse to store character constants. A character variable can hold only one character constant. The type specifier is char.\n#include&lt;stdio.h&gt;int main()&#123;    char x,y,z;    x = &#x27;b&#x27;;    y = &#x27;o&#x27;;    z = &#x27;y&#x27;;    printf(&quot;%c%c%c\\n&quot;,x,y,z);return 0;&#125;\n\nThe result is:\nboy\n\nThe literal value of a character variable is independent of the character constant it holds, analogous to an integer variable.\nCharacter variables can also store integer data, which is universal. You can change %c to %d during input and output.\nOutput and input of a variableOutputAs mentioned above, printf can print a string, and can print the value of a variable, as shown in the following example:\n#include &quot;stdio.h&quot;int main()&#123;    int i = 1;    printf(&quot;i = %d\\n&quot;,i);    i = 2;    printf(&quot;After assignment，i = %d\\n&quot;,i);    return 0;&#125;\n\nNotice that printf prints the value of the variable with a %d inside the double quotes, which is the way the variable is formatted.\n %d indicates that the output variable is an integer.\n\n\n\nVariable Types\nFormatting Symbols\n\n\n\nint\n%d\n\n\nunsigned\n%u\n\n\nlong long\n%ld\n\n\nunsigned long long\n%lu\n\n\nfloat\n%f\n\n\ndouble\n%lf\n\n\nYou can use scientific notation when you output, and use %e for formatting symbol.\nprintf(&quot;%.nf&quot;,sum);\n\nThis line of code can preserve n decimal places.\nThe following are escape characters:\n\n\n\nSymbols\nWords\n中文含义\n\n\n\n\\b\nbackspace\n回退一格\n\n\n\\t\ntab\n下一个制表位\n\n\n\\n\nnew line\n换行\n\n\n\\r\nreturn\n回车\n\n\n\\f\nf\n换页\n\n\nInputSimilarly, the function scanf can read the input according to a certain format.\n#include &lt;stdio.h&gt;int main( ) &#123;   char str[100];   int i;   printf( &quot;Enter a value :&quot;);   scanf(&quot;%s %d&quot;, str, &amp;i);   printf( &quot;\\nYou entered: %s %d &quot;, str, i);   printf(&quot;\\n&quot;);   return 0;&#125;\n\nscanf() stops reading a string as soon as it encounters a space, so “this is test” is three strings for scanf().\nFloating point numbersIn mathematics, the numbers on the number line are continuous, and between any two different points, an infinite number can be found, but this is difficult to achieve in computers, so floating point numbers emerged.\nFloating point numbers are used to represent fractional numbers between whole numbers, but their accuracy is not infinite, nor is their expressability infinite, so a random decimal may not be able to be expressed by a computer.\nOperationOperator\n\n\nMathematics\nAdd\nSubstract\nMultiply\nDivide\nRemainder\n\n\n\nC Language\n+\n-\n*\n&#x2F;\n%\n\n\nRelational operator\n\n\nRelation\nEqual\nNot Equal\nGreater\nGreater or Equal\nLess-than\nLess-than or Equal\n\n\n\nOperator\n&#x3D;&#x3D;\n!&#x3D;\n&gt;\n&gt;&#x3D;\n&lt;\n&lt;&#x3D;\n\n\nThe relational operator evaluates only zeros and ones.\nSpecial operatorcount ++ and ++ count both mean to add one, but a = count ++; means to assign the value of count to a and then add one, whereas a = ++count; means to add one to the value of count and then assign the result to a. So you end up adding one to count in both cases, but the value of a differ by 1.\ncount -- and -- count in the same way.\n, is comma operator that generally has only one purpose: to add multiple conditions to an if statement.\nConditional operatorcount = (&lt;#condition#&gt;)? &lt;#yes#&gt;:&lt;#no#&gt;;\n\nIt is equivalent to an if statement.\n\nNesting is not recommended.\n\nLogical operator\n\n\nLogic\nand\nor\nnot\n\n\n\nSymbol\n&amp;&amp;\n||\n!\n\n\nThe result of logical operation is only 0 or 1.\nSeveral statementsifif (&lt;#condition#&gt;) &#123;      &lt;#statements#&gt;  &#125;\n\nTo judge and to act when the conditions are true.\n   if (&lt;#condition#&gt;) &#123;       &lt;#statements#&gt;   &#125;   else if (#condition#) &#123;       &lt;#statements#&gt;   &#125;else if (#condition#) &#123;       &lt;#statements#&gt;   &#125; ……   else &#123;       &lt;#statements#&gt;   &#125;\n\nWe can add else, so we can do something if the condition doesn’t work.\nThe else always matches the nearest if.\nwhilewhile (&lt;#condition#&gt;) &#123;    &lt;#statements#&gt;&#125;\n\nThe loop continues until the condition fails.\ndowhiledo &#123;    &lt;#statements#&gt;&#125; while (&lt;#condition#&gt;);\n\nThe loop continues until the condition fails.\nThe difference with a while loop is that a dowhile does something and then evaluates the condition, whereas a while evaluates the condition and then loops. While might not do a loop at all, if the condition is not satisfied in the first place.\nswitchswitch (&lt;#expression#&gt;) &#123;    case &lt;#constant#&gt;:        &lt;#statements#&gt;        break;   case &lt;#constant#&gt;:        &lt;#statements#&gt;        break;    ......    default:        break;&#125;\n\nswitch is judgment statement, the &lt;#expression#&gt;  is constant expression that must be a integral type or enum-type.\nThe essence of such a statement is the program evaluates this expression and then compares it to each case at a time. The action after the case is executed when equal.\nThere are an infinite number of cases, each followed by a value to be compared with and a colon.\nThe variables to be compared must be of the same type.\nWhen all the case is false, the program will do the action after default . So there can be nothing after defalut.\nFor example:\n#include &lt;stdio.h&gt;int main()&#123;    int a;    printf(&quot;Input integer number:&quot;);    scanf(&quot;%d&quot;,&amp;a);    switch(a)&#123;        case 1: printf(&quot;Monday\\n&quot;); break;        case 2: printf(&quot;Tuesday\\n&quot;); break;        case 3: printf(&quot;Wednesday\\n&quot;); break;        case 4: printf(&quot;Thursday\\n&quot;); break;        case 5: printf(&quot;Friday\\n&quot;); break;        case 6: printf(&quot;Saturday\\n&quot;); break;        case 7: printf(&quot;Sunday\\n&quot;); break;        default:printf(&quot;error\\n&quot;); break;    &#125;    return 0;&#125;\n\nforfor (&lt;#initialization#&gt;; &lt;#condition#&gt;; &lt;#increment#&gt;) &#123;    &lt;#statements#&gt;&#125;\n\nfor loop applies to loops with a defined number of cycles, such as traverse.\nThere are three sections in parenthesis, separated with semicolons, which are respectively initialization, conditions for loop to proceed and actions to be performed in each cycle.\nMiscellaneous\n\n\nKey words\nImplication\n\n\n\nInf\nInfinity\n\n\n-Inf\nNegative infinity\n\n\nnan\nInvalid number\n\n\nfabs(&lt;#expression#&gt;)\nAbsolute value\n\n\nbreak\nJump out of the loop\n\n\ncontinue\nEnd the cycle\n\n\nFunction and customizing functionAt the beginning of C language program, the implication of #include &lt;stdio.h&gt; is including a function library named stdio.h and then the program can call functions in the library. Both the printf and the scanf used in the previous paragraph are functions of the library.\nIn practice, we often encounter repeated operations, we can copy this code to complete the repeated action, but code copy is a poor quality of the program, because the maintenance may need to change too many places.\nYou can solve this problem by customizing functions:\n&lt;#type#&gt; (&lt;#type#&gt;,&lt;#type#&gt;,……)&#123;  &lt;#statement#&gt;  return 0; //Depends on the function type，Also visable as：return;&#125;\n\n\nA function can have multiple return  or none. However, multiple return are not recommended for easy modification.\n\nEach function has its own variable space, namely &#123;&#125; (block), which is independent of each other. Local variables are limited by the block they are in. If the inside of a block has the same name as the outside of a block, the inside of a block takes precedence.\n\nWhen a function is called, it can only pass values to functions, not variables to functions. That is, after passing a variable to a function, the function will read the value of the variable for operation, but will not change the value of the variable.\n\nThe first line of a function with a semicolon placed before the entire program code is called a function prototype declaration. The purpose is to tell the compiler what type the function is before it encounters it.\n\n\nArrayDefination\ntype of variables + character + [number of variables]\n\nFor example:\nint a[10];\n\nAn array is a container that, once created, cannot be resized, is internally ordered, and can appear on both sides of an assignment symbol.\nThe index of an array is counted from 0.\nYou can think of it as a sequence in mathematics.\nUseIntegration initialization is easy to use:\nint a[3] = &#123;1,3,5,&#125;;int a[13] = &#123;[0]=2,[3]=5,6,7,[9]=0,&#125;; //（C99 only）\n\nIf you don’t know how many cells there are in an array, you can use sizeof(a)/sizeof(a[0]) to represent the number of cells in the array, so that you don’t need to change the number of cells in the array.\nMultidimensional arrayA multidimensional array is actually a multidimensional matrix, and the footer increases accordingly.\nInitialization:\nint a[][5] = &#123; &#123;0,1,2,3,4&#125;, &#123;2,3,4,5,6&#125;,&#125;\n\nThe number of columns must be given and the number of rows can be counted by the compiler itself.\nPointerAddressEach variable has an address in the computer where it is stored. The value of a variable can change, but its address is constant. The following code can be used to view the address of a variable.\nint i = 1;printf(&quot;%d\\n&quot;,&amp;i);\n\n&amp; is the address to access the variable;\n* is the variable on the access address.\nDefinationA pointer is a variable, but it cannot be used independently. It must point to a variable. In this case, the value of the pointer variable is the address of the variable to which it points.\nUseint *p = &amp;i;\n\nIn this case, p is a pointer to the address of variable i. So the value of p is the address of i, and the value of i can be accessed (read and write) by *p.\nThe * at definition is not the same as the * at access, and the first is only used to distinguish whether a pointer variable or a normal variable is being defined.\nHere is an example of using a pointer to complete a call to exchange the values of two variables.\n#include &lt;stdio.h&gt;void exchange(int *a,int *b)&#123;    int i = *a;    *a = *b;    *b = i;&#125;int main()&#123;    int a = 5;    int b = 6;    exc(&amp;a, &amp;b);    printf(&quot;a = %d,b = %d\\n&quot;,a,b);    return 0;&#125;\n\nThis is a clever use of the function, we know that the function cannot input variable parameters, so this code defines the address of the pointer to the variable, the function input pointer variable is also the address of the variable, inside the function by adding a pointer to access the variable, and then achieve the purpose of the function to modify the variable.\n\nIn addition, pointers are often used when a function needs to return multiple values.\n\nArrays are special Pointers#include &lt;stdio.h&gt;int main()&#123;    int a[] = &#123;1,2,3,&#125;;    printf(&quot;%p\\n&quot;,a);    return 0;&#125;\n\nThe result of this code is:\n0x7ffcac420c3c\n\nWe can see that the array variable a is itself an address, so when we want to use a pointer to array a, we should write int *p = a, without &amp;. But the array unit is variable, therefore int *p = &amp;a[0], at the same time, a == &amp;a[0],&amp;a[x] == &amp;a[0] + 4x = a + 4x(when a is integer).\nAn array is a pointer to a constant and therefore cannot be assigned.\nPointer to a constant (const)int i;int const *p = &amp;i; // 1int *const p = &amp;i; // 2\n\nFor the above code, you can think of the following code:\nint i;int const (*p) = &amp;i; // 1int *(const p) = &amp;i; // 2\n\n1 indicates that the variable at the address pointed to by the pointer p cannot be modified by the pointer.\n2 indicates that the address (variable’s address certainly) pointed to by p cannot be changed.\n\nThe first whole to the right of const cannot be modified\n\nconst int a[] = &#123;1,2,3,&#125;;\n\nThe above code indicates that each cell is const, so it can be used to protect an array when a function argument is entered.\nAddress of a pointerint a[];int *p = a;\n\n*p = a = a[0],\n*(p+1) = a[1],\n*(p+2) = a[2],\n……,\n*(p+n) = a[n].\nAllocating Memory SpaceThe malloc function applies space in bytes from memory, returns void *, converts the desired type, and finally frees the memory. Format, such as:\nint a[n] = (int *)malloc(n * sizeof(int));\n\nIf the application fails, 0 or NULL is returned.\nWhen you no longer use the requested memory space, you should use the free function to free the memory space:\nfree(a[n]);\n\nStringOverviewChar word[] = &#123;&#x27;H&#x27;,&#x27;D&#x27;,&#x27;e&#x27;,&#x27;!&#x27;&#125;;\n\nSuch an array is an array of characters, but it is not a string, because it cannot be evaluated as a string.\nChar word[] = &#123;&#x27;H&#x27;,&#x27;D&#x27;,&#x27;e&#x27;,&#x27;!&#x27;,&#x27;\\0&#x27;&#125;;\n\nFollowed by \\0, then word is a string.\n0 &#x3D; &#39;\\0&#39; !&#x3D; &#39;0&#39;\n0 marks the end of the string, but this 0 is not part of the string.\nStrings exist as Arrays and are accessed as arrays or Pointers, but more often as Pointers.\nstring.h has a number of functions that handle strings.\nString variables:\nchar *str = &quot;hello&quot;;char word[] = &quot;hello&quot;;char line[10] = &quot;hello&quot;;\n\n\n“hello”\n\nThe compiler will turn this into an array of characters somewhere, and the length of the array is 6, because the compiler will put a 0 after it to make it a string.\nLiterals of strings can be used to initialize character arrays.\n#include &quot;stdio.h&quot;int main()&#123;    int i = 0;    char *s = &quot;hello world&quot;;//    s[0] = &#x27;B&#x27;;    char *s2= &quot;hello world&quot;;    char s3[] = &#123;&quot;hello world&quot;&#125;;//    s3[0] = &#x27;b&#x27;;    printf(&quot;&amp;i = %p\\n&quot;, &amp;i);    printf(&quot;s = %p\\n&quot;, s);    printf(&quot;s2 = %p\\n&quot;, s2);    printf(&quot;Here is s[0] = %c\\n&quot;, s[0]);    printf(&quot;Here is s3[0] = %c\\n&quot;,s3[0]);    return 0;&#125;\n\nThe above code runs as follows:\n&amp;i = 0x7fffa827bcf4s = 0x55c7d8f64004s2 = 0x55c7d8f64004Here is s[0] = hHere is s3[0] = h\n\nYou can see that the local variable i is far from where the pointer s is pointing. The address of the variable i is very far back, and the pointer is very far forward. Near the front are important parts of the computer that are not allowed to be modified, such as plus s[0] = &#39;B&#39; ‘, and the result is:\n1869 segmentation fault  ./a.out\n\nThe program attempted to reassign the initialized string s. The error “segmentation fault“ was reported, meaning that the program was attempting to rewrite the value at 0x55c7d8f64004, which posed a threat to the computer and was not allowed.\nIn fact, for char *s = &quot;hello world&quot;; pointer s is initialized to point to a string constant, which should actually be const char *s = &quot;hello world&quot;;, but for historical reasons, compilers accept writing without const, and try to modify the string to which s refers, with serious consequences.\ns3 is an array, and the strings inside are local variables that can be modified, plus S3[0] = &#39;b&#39;:\n&amp;i = 0x7fff28d5dd64s = 0x559da8ac6004s2 = 0x559da8ac6004Here is s[0] = hHere is s3[0] = b\n\nThere are two ways to define a string: pointer or array.\nArrays know the address of strings, Pointers don’t.\nA char * or int * is not necessarily a string. It is meant to be a pointer to a character or an array of characters.\n A char * or int * is a string only if the array of characters to which the pointer points has a zero at the end.\nchar *t = &quot;title&quot;;char *s;s = t;\n\nFor the above code, we have two Pointers, t and s. First, t points to the string “title”, and then we assign a value to s. The result is that s also points to the same string, instead of creating a new string.\nInput and output of stringFor printf and scanf, you can use %s to input and output strings.\nEach %s in scanf is read until a SPACE or ENTER, which is not safe because you do not know exactly how many characters to read, therefore, the following code is used:\nchar s[8];scanf(&quot;%7s&quot;,s);\n\nArray of stringschar a[][10];char *a[];\n\nThe first line refers to a as a two-dimensional array, and the second line refers to a as a pointer array. Each unit in the array is a pointer to a string.\nEach element of the character array holds one character, plus the 0 at the end. An array of length n can hold n-1 characters.\nMultiple loops are required to input and output all elements of multiple dimensions, whether string arrays or integer arrays.\nAn array is a matrix that can be used to store variables or character variables. All input and output need to be looped, but there are two types of input and output for character arrays.\nInput and output single characters in format %c#include &lt;stdio.h&gt;int main()&#123;    int x,i,j;    char a[][20] = &#123;        &quot;&quot;,        &quot;Monday&quot;,        &quot;Tuesday&quot;,        &quot;Wednesday&quot;,        &quot;Thursday&quot;,        &quot;Friday&quot;,        &quot;Saturday&quot;,        &quot;Sunday&quot;,    &#125;;    printf(&quot;Please input the month：\\n&quot;);    scanf(&quot;%d&quot;,&amp;x);    if (x &gt; 0 &amp;&amp; x &lt; 8) &#123;        for (i = x ; i &lt; x + 1; i ++) &#123;            for (j = 0; j &lt; 20; j ++) &#123;               printf(&quot;%c&quot;,a[i][j]);          &#125;       &#125;           &#125;    else printf(&quot;Error&quot;);    printf(&quot;\\n&quot;);    return 0;&#125;\n\nInput and output whole array with format %s#include &lt;stdio.h&gt;int main()&#123;    int x,i,j;    char a[][20] = &#123;        &quot;&quot;,        &quot;Monday&quot;,        &quot;Tuesday&quot;,        &quot;Wednesday&quot;,        &quot;Thursday&quot;,        &quot;Friday&quot;,        &quot;Saturday&quot;,        &quot;Sunday&quot;,    &#125;;    printf(&quot;Please input the month：\\n&quot;);    scanf(&quot;%d&quot;,&amp;x);    if (x &gt; 0 &amp;&amp; x &lt; 8) &#123;        printf(&quot;%s&quot;,a[x]);    &#125;    else printf(&quot;Error&quot;);    printf(&quot;\\n&quot;);    return 0;&#125;\n\n\nNote that input characters with %s that encounter a SPACE, RNTER, and TAB end the string input, so C provides the input function gets() and the output function puts() that are best for strings.\n\ngets(char *s[]) function is to enter a string from the keyboard that can contain Spaces and end with a ENTER newline character.\nputs(char *s[]) or puts(string s)function prints a string from the character array to the screen and converts the end-of-string flag to a newline character.\nIn addition, when %s prints a string, it keeps one dimension, and the compiler automatically inputs or outputs all strings in that dimension. Gets is the same as puts.\nInput and output of character dataPutchar(parameter)Paremeters can be numerical values, character constants, character variables, and arithmetic or character expressions, but the final output is a character.\ngetchar()Type a character from the keyboard.\nString functionstrlen#include&lt;stdio.h&gt;#include &lt;string.h&gt;int main(int argc, char const *argv[])&#123;       char line[] = &quot;hello&quot;;    printf(&quot;%lu\\n&quot;, strlen(line));    printf(&quot;%lu\\n&quot;, sizeof(line));    return 0;&#125;\n\nThe running result is:\n56\n\nSo strlen is string Length, which returns the length of the string.\nstrcmpThe function is to compare the size of two strings, and the result of the comparison is expressed by the value returned. 0 means they are equal, 1 means the former greater, and -1 means the latter greater.\nstrcpyIt means string copy，the format is：\nchar *strcpy(char *restrict dst, const *restrict src);\n\nIts function is to copy the src string to dst.restrict means that src and dst cannot overlap.The source is in the back, and the copying destination is in the front.Return dst so that the function itself can be evaluated.General usage:\nchar *dst = (char)malloc(strlen(src)+1);strcpy (dst,src)\n\nstrcatThe function is to link one string to another string.\n\nAnother version:\nchar *strncpy(char *restrict dst, const *restrict src,size_t n);char *strncat(char *restrict s1, const *restrict s2,size_t n);int strncmp(const char *s1, const char *s2, size_t n);\n\nThe first two are to limit the length of the copied string, eliminating security issues that are neither out of bounds.\nThe last one is to compare the first n characters.\n\nstrchrTo find a character in a string.\n#include&lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;stdlib.h&gt;int main(int argc, char const *argv[])&#123;    char s[] = &quot;hello,world!&quot;;    char *p = strchr(s,&#x27;l&#x27;);    printf(&quot;%s\\n&quot;,p);    char c = *p;    *p = &#x27;\\0&#x27;;    printf(&quot;%c\\n&quot;,c);    char *p3 = (void*)malloc(strlen(s)+1);    strcpy(p3, s);    printf(&quot;%s\\n&quot;,p3);    free(p3);    char *p1 = strchr((p+1), &#x27;l&#x27;);    char *p2 = strchr((p1+1), &#x27;l&#x27;);    printf(&quot;%s\\n&quot;,p1);    printf(&quot;%s\\n&quot;,p2);    return 0;&#125;\n\nThe running results are as follows:\nllo,world!lhelo,world!ld!\n\nEnumerationenum type &#123;num_0,num_1,num_2,……,num_n&#125;;\n\nYou can use the name in curly braces, where num_0 through num_n represents the constants 0 through n.\nFor instance:\nenum colors &#123;red,yellow,green&#125;;// Here，red == 0, yellow == 1, green == 2 \n\nenum type &#123;num_0,num_1,num_2,……,num_n, number of type&#125;;\n\nThat’s just right. The last number of type is exactly the number of type. It’s a little trick.\nData structure#include &lt;stdio.h&gt;struct date &#123;    int day;    int month;    int year;&#125;;//Structure type Declarationstruct date &#123; int day; int month; int year;&#125; today;//This is another formint main()&#123;    struct date today;    today.day = 25;    today.month = 3;    today.year = 2021;   today = (struct date)&#123;25,3,2021&#125;;    printf(&quot;Today is %i-%i-%i.\\n&quot;,           today.year,today.month,today.day);    return 0;&#125;\n\nThis means that you declare a data structure type, and when you use it, you define a variable that contains all the variables in the data structure.\nThe structure members of a data structure do not have to be of the same variable type, and an array can only be of one type.\nData structures can perform structure operations .\nAssigning values to or between structure variables is a one-to-one correspondence; the former requires curly braces.\nThe name of the structure variable is not the address of the structure variable, so you need to define the pointer using &amp;.\nA data structure can be entered as a function parameter, but unlike an array, the entire structure is passed into the function as the value of the parameter, creating a new structure variable inside the function and copying the value of the caller’s structure.\nYou can also return a struct.\nCustom data typesA typedef can give an alias to a data type.\ntypedef long int64_t;typedef struct ADate &#123; int month; int day; int year;&#125; Date;int64_t i = 100000000000;Date d = &#123;9, 1, 2005, &#125;;\n\nUnion带参数的宏一定要有括号，结尾不能加分号。\n","categories":["Programming","Language"],"tags":["c"]}]